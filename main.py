import pytesseract
from PIL import Image
from io import BytesIO
from deep_translator import GoogleTranslator
from langdetect import detect
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, filters, CommandHandler, ContextTypes
import os
import re

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–∫–ª–∞–¥–∞—á–∞
translator = GoogleTranslator(source='auto', target='uk')

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –º–æ–≤–∏
def detect_language(text):
    try:
        lang = detect(text)
        return lang
    except:
        return None

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ç–µ–∫—Å—Ç—É (—ñ–≥–Ω–æ—Ä—É—î–º–æ —Å–º–∞–π–ª–∏–∫–∏ —Ç–∞ –ø–æ—Ä–æ–∂–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)
def is_valid_text(text):
    # –í–∏–¥–∞–ª—è—î–º–æ —Å–º–∞–π–ª–∏–∫–∏ —Ç–∞ –ø—Ä–æ–±—ñ–ª–∏
    cleaned_text = re.sub(r'[^\w\s.,!?]', '', text).strip()
    return bool(cleaned_text)

# –û–±—Ä–æ–±–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω—å
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    photo = update.message.photo[-1]
    photo_file = await photo.get_file()
    img_bytes = await photo_file.download_as_bytearray()

    # –†–æ–∑–ø—ñ–∑–Ω–∞—î–º–æ —Ç–µ–∫—Å—Ç
    img = Image.open(BytesIO(img_bytes))
    extracted_text = pytesseract.image_to_string(img, lang='eng+ukr+rus')  # –ê–Ω–≥–ª, —É–∫—Ä, —Ä–æ—Å

    # –Ø–∫—â–æ —Ç–µ–∫—Å—Ç—É –Ω–µ–º–∞—î, –∞–±–æ –≤—ñ–Ω –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –∫–æ—Ä–∏—Å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó ‚Äî —ñ–≥–Ω–æ—Ä—É—î–º–æ
    if not extracted_text.strip() or not is_valid_text(extracted_text):
        return

    lang = detect_language(extracted_text)
    if lang in ["uk", "ru"]:
        return  # –Ü–≥–Ω–æ—Ä—É—î–º–æ, —è–∫—â–æ —Ç–µ–∫—Å—Ç —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é —á–∏ —Ä–æ—Å—ñ–π—Å—å–∫–æ—é

    # –ü–µ—Ä–µ–∫–ª–∞–¥–∞—î–º–æ —Ç–µ–∫—Å—Ç —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä–µ–∫–ª–∞–¥
    translated_text = translator.translate(extracted_text)
    await update.message.reply_text(f"{translated_text}")

# –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_text = update.message.text

    # –Ü–≥–Ω–æ—Ä—É—î–º–æ, —è–∫—â–æ –≤ —Ç–µ–∫—Å—Ç—ñ –Ω–µ–º–∞—î –∫–æ—Ä–∏—Å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
    if not is_valid_text(user_text):
        return

    lang = detect_language(user_text)
    if lang in ["uk", "ru"]:
        return  # –Ü–≥–Ω–æ—Ä—É—î–º–æ, —è–∫—â–æ —Ç–µ–∫—Å—Ç —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é —á–∏ —Ä–æ—Å—ñ–π—Å—å–∫–æ—é

    # –ü–µ—Ä–µ–∫–ª–∞–¥–∞—î–º–æ
    translated_text = translator.translate(user_text)
    await update.message.reply_text(f"üåç –ü–µ—Ä–µ–∫–ª–∞–¥:\n{translated_text}")

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—Å–∏–ª–∞–π –º–µ–Ω—ñ —Ç–µ–∫—Å—Ç —ñ–Ω—à–∏–º–∏ –º–æ–≤–∞–º–∏ ‚Äì —è –ø–µ—Ä–µ–∫–ª–∞–¥—É –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É!")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    bot_token = os.getenv("BOT_TOKEN")  # –¢–æ–∫–µ–Ω –±–µ—Ä–µ–º–æ –∑ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∑–º—ñ–Ω–Ω–∏—Ö
    app = ApplicationBuilder().token(bot_token).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(MessageHandler(filters.TEXT, handle_text))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    app.run_polling()

if __name__ == "__main__":
    main()
