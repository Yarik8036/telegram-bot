import pytesseract
from PIL import Image
from io import BytesIO
from deep_translator import GoogleTranslator
from langdetect import detect
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, CommandHandler, filters
import os
import re

# –í–∫–∞–∑—É—î–º–æ —à–ª—è—Ö –¥–æ Tesseract
pytesseract.pytesseract.tesseract_cmd = '/usr/bin/tesseract'

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–∫–ª–∞–¥–∞—á–∞
translator = GoogleTranslator(source='auto', target='uk')

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –º–æ–≤–∏
def detect_language(text):
    try:
        lang = detect(text)
        return lang
    except:
        return None

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ç–µ–∫—Å—Ç—É (—ñ–≥–Ω–æ—Ä—É—î–º–æ —Å–º–∞–π–ª–∏–∫–∏, —Ü–∏—Ñ—Ä–∏ —Ç–∞ –ø–æ—Ä–æ–∂–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)
def is_valid_text(text):
    cleaned_text = re.sub(r'[^\w\s.,!?]', '', text)
    cleaned_text = re.sub(r'\d', '', cleaned_text).strip()
    return bool(cleaned_text)

# –û–±—Ä–æ–±–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω—å
async def handle_photo(update: Update, context) -> None:
    photo = update.message.photo[-1]
    photo_file = await photo.get_file()
    img_bytes = await photo_file.download_as_bytearray()

    # –†–æ–∑–ø—ñ–∑–Ω–∞—î–º–æ —Ç–µ–∫—Å—Ç
    img = Image.open(BytesIO(img_bytes))
    img = img.convert('L')  # –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–∞ —á–æ—Ä–Ω–æ-–±—ñ–ª–µ
    img = img.point(lambda x: 0 if x < 140 else 255)  # –ó–±—ñ–ª—å—à–µ–Ω–Ω—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç—É
    extracted_text = pytesseract.image_to_string(img, lang='eng+ukr+rus')

    # –õ–æ–≥–∏ –¥–ª—è –≤—ñ–¥–ª–∞–¥–∫–∏
    print(f"–†–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–π —Ç–µ–∫—Å—Ç: {extracted_text}")

    if not extracted_text.strip() or not is_valid_text(extracted_text):
        await update.message.reply_text("–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ —Ç–µ–∫—Å—Ç üòî")
        return

    lang = detect_language(extracted_text)
    if lang in ["uk", "ru"]:
        return  # –Ü–≥–Ω–æ—Ä—É—î–º–æ, —è–∫—â–æ —Ç–µ–∫—Å—Ç —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é —á–∏ —Ä–æ—Å—ñ–π—Å—å–∫–æ—é

    translated_text = translator.translate(extracted_text)
    await update.message.reply_text(f"üåç –ü–µ—Ä–µ–∫–ª–∞–¥:\n{translated_text}")

# –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def handle_text(update: Update, context) -> None:
    user_text = update.message.text

    if not is_valid_text(user_text):
        return

    lang = detect_language(user_text)
    if lang in ["uk", "ru"]:
        return

    translated_text = translator.translate(user_text)
    await update.message.reply_text(f"üåç –ü–µ—Ä–µ–∫–ª–∞–¥:\n{translated_text}")

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context) -> None:
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—Å–∏–ª–∞–π –º–µ–Ω—ñ —Ç–µ–∫—Å—Ç —ñ–Ω—à–∏–º–∏ –º–æ–≤–∞–º–∏ ‚Äì —è –ø–µ—Ä–µ–∫–ª–∞–¥—É –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É!")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    bot_token = os.getenv("BOT_TOKEN")
    app = ApplicationBuilder().token(bot_token).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(MessageHandler(filters.TEXT, handle_text))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    app.run_polling()

if __name__ == "__main__":
    main()
